
@if (IsModalVisible)
{
    <div class="modal fade show d-block" id="claimOnboardAccount" tabindex="-1" role="dialog" aria-labelledby="claimOnboardLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                @if (IsConfirmed)
                {
                    <div class="modal-header">
                        <h5 class="modal-title text-dark-75" id="claimOnboardLabel">Claim Account With Your Valid Email</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => OnButtonConfirmClick(false)">
                            <i aria-hidden="true" class="ki ki-close"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="text-center mb-5">
                            <p class="text-muted font-weight-bold">Enter your email and password to verify your account.</p>
                        </div>
                        <EditForm class="form text-left" id="claimAccountForm" Model="@Model">
                            <DataAnnotationsValidator />
                            <CascadingValue Value="@FormElementStyle" Name="FormInput Class">
                                <CascadingValue Value="@InputElementStyle" Name="Input Class">
                                    <OneUX_InputBox @bind-Value="Model.UserName" ValidationFor="@(() => Model.UserName)" PlaceholderText="Email" ElementId="userEmailId" />
                                    <OneUX_InputBox @bind-Value="Model.Password" ValidationFor="@(() => Model.Password)" PlaceholderText="New Password" Type="password" ElementId="newPassword" />
                                    <OneUX_InputBox @bind-Value="Model.ConfirmPassword" PlaceholderText="Confirm Password" Type="password" ElementId="confirmnewPassword" />
                                </CascadingValue>
                            </CascadingValue>
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-light-primary font-weight-bold" data-dismiss="modal" @onclick="() => OnButtonConfirmClick(false)">Cancel</button>
                        <button type="button" class="btn btn-primary font-weight-bold" @onclick="SubmitClaimAccountAsync">Submit</button>
                    </div>
                }
                else
                {
                    <div class="modal-header">
                        <h5 class="modal-title text-dark-75" id="claimOnboardLabel">Confirm Your Account</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => OnButtonConfirmClick(false)">
                            <i aria-hidden="true" class="ki ki-close"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="text-center mb-5">
                            <p class="text-muted font-weight-bold">Please enter provided e-mail and password.</p>
                        </div>
                        <EditForm class="form text-left" id="checkAccountForm" Model="@Model">
                            <DataAnnotationsValidator />
                            <CascadingValue Value="@FormElementStyle" Name="FormInput Class">
                                <CascadingValue Value="@InputElementStyle" Name="Input Class">
                                    <OneUX_InputBox @bind-Value="Model.UserName" ValidationFor="@(() => Model.UserName)" PlaceholderText="Email" ElementId="providedEmailId" />
                                    <OneUX_InputBox @bind-Value="Model.Password" ValidationFor="@(() => Model.Password)" PlaceholderText="Password" Type="password" ElementId="providedPassword" />
                                </CascadingValue>
                            </CascadingValue>
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-light-primary font-weight-bold" data-dismiss="modal" @onclick="() => OnButtonConfirmClick(false)">Cancel</button>
                        <button type="button" class="btn btn-primary font-weight-bold" @onclick="ConfirmExistingAccount">Confirm</button>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {
    protected bool IsModalVisible { get; set; }
    private bool IsConfirmed { get; set; } = false;
    private Authentication Model = new Authentication();
    private CS_Authentication AuthenticationService { get; set; }

    protected Authentication AuthModel { get; set; }

    protected void OnButtonConfirmClick(bool value)
    {
        if (!value)
        {
            IsModalVisible = false;
            IsConfirmed = false;
        }
    }
    public void ShowModal()
    {
        IsModalVisible = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationService = new CS_Authentication(ClientExchange, EngineServices.MarketNetwork);
            AuthModel = new Authentication();
        }
        catch (Exception e)
        {
            SLog.Write(e.Message);
        }
    }

    private async Task ConfirmExistingAccount()
    {
        try
        {
            HttpResponseMessage response = await AuthenticationService.PostAsync(Model, "AccountForClaim");
            if (response.IsSuccessStatusCode)
            {
                IsConfirmed = true;
                AuthModel = await AuthenticationService.GetExistingAccountForClaim(Model);
                SLog.Write("Account Exists For Claim..!");
                ToastService.ShowInfo("Account Confirmed Successfully..!!");
            }
            else
            {
                SLog.Write(await response.Content.ReadAsStringAsync());
                ToastService.ShowError(await response.Content.ReadAsStringAsync(), "Confirmation Failed!");
            }
        }
        catch (Exception ex)
        {
            SLog.Write(ex.Message);
        }
    }

    private async Task SubmitClaimAccountAsync()
    {
        try
        {
            if (Model.Password != Model.ConfirmPassword)
            {
                ToastService.ShowWarning("Confirm password mismatch.");
                return;
            }
            if (!UXUtility.IsEmailValid(Model.UserName))
            {
                ToastService.ShowWarning("Invalid Email", "Please Try Again :)");
                return;
            }
            AuthModel.UserName = Model.UserName;
            AuthModel.Password = Model.Password;
            HttpResponseMessage response = await AuthenticationService.PutAsync(AuthModel, "ClaimAccount");
            if (response.IsSuccessStatusCode)
            {
                SLog.Write("Account Exists For Claim..!");
                ToastService.ShowSuccess("Account Claimed Successfully..!!");
                IsModalVisible = false;
            }
        }
        catch (Exception ex)
        {
            SLog.Write(ex.Message);
        }
    }

    public string InputElementStyle { get; set; } = "h-auto p-2 form-control-solid placeholder-dark-75";
    public string FormElementStyle { get; set; } = "py-0 mb-3 ";

}
