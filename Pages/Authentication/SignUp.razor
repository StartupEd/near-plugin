@page "/signup"
@page "/signup/invite/uid/{RefUserId}"
@using StartupEd.Engine.MarketNetwork

<div class="login-signup">
    <div class="text-center mb-10 mb-lg-20">
        <h3>Sign Up</h3>
        <p class="text-muted font-weight-bold">Enter your details to create your account</p>
    </div>
    <EditForm class="form text-left" id="signupForm" Model="@Model" OnValidSubmit="SubmitModel">
        <DataAnnotationsValidator />
        <CascadingValue Value="@FormElementStyle" Name="FormInput Class">
            <CascadingValue Value="@InputElementStyle" Name="Input Class">
                <OneUX_InputBox @bind-Value="Model.FirstName" PlaceholderText="First Name" ElementId="firstName" />
                <OneUX_InputBox @bind-Value="Model.LastName" PlaceholderText="Last Name" ElementId="lastName" />
                <OneUX_InputBox @bind-Value="Model.UserName" ValidationFor="@(() => Model.UserName)" PlaceholderText="Email" ElementId="signupEmail" />
                <OneUX_InputBox @bind-Value="Model.Password" ValidationFor="@(() => Model.Password)" PlaceholderText="Password" Type="password" ElementId="signupPassword" />
                <OneUX_InputBox @bind-Value="Model.ConfirmPassword" PlaceholderText="Confirm Password" Type="password" ElementId="confirmPassword" />
                @*<OneUX_InputSelect @bind-Value="Model.Persona" Id="personaList" Title="Select Persona">
                        <option value="1" selected disabled>What is your role?</option>
                        @foreach (var persona in Persona)
                        {
                            <option value="@persona">@persona</option>
                        }
                    </OneUX_InputSelect>*@
            </CascadingValue>
        </CascadingValue>
        @*<div class="form-group">
                <div class="col-lg-4 col-md-9 col-sm-12">
                    <div class="g-recaptcha" data-sitekey="6Lejfq4ZAAAAANi1S3C4OxhDijr53xWcdMMi3AV7"></div>
                </div>
            </div>*@
        <div class="form-group mt-3">
            <div class="checkbox-inline">
                <label class="checkbox checkbox-outline font-weight-bold">
                    <InputCheckbox type="checkbox" name="agree" @bind-Value="Model.IsValidateTerms" required />
                    <span></span>
                    I agree to the <a href="https://www.startuped.net/terms.html" class="ml-1">terms and conditions</a>.
                </label>
            </div>
        </div>
        <div class="form-group d-flex flex-wrap flex-center">
            @if (IsSpinning)
            {
                <button id="signupBtn" class="btn btn-primary btn-pill font-weight-bold px-9 py-4 my-3 mx-2" disabled><i class="fas fa-spinner fa-spin"></i> Submitting...</button>
            }
            else
            {
                <button id="signupBtn" class="btn btn-primary btn-pill font-weight-bold px-9 py-4 my-3 mx-2"> Submit</button>
            }

            <a href="login" id="kt_login_signup_cancel" class="btn btn-outline-primary btn-pill font-weight-bold px-9 py-4 my-3 mx-2">Cancel</a>
        </div>
    </EditForm>
</div>



@code{
    [Parameter] public string RefUserId { get; set; }
    private Authentication Model { get; set; } = new Authentication();
    private CS_Authentication ClientService { get; set; }
    private CS_Invitation InvitationService { get; set; }
    private bool IsSpinning { get; set; } = false;
    private async void SubmitModel()
    {
        IsSpinning = true;
        if (Model.Password != Model.ConfirmPassword)
        {
            ToastService.ShowWarning("Confirm Password Mismatch", "Registration Failed :(");
            return;
        }
        //if (Model.Persona == null)
        //{
        //    ToastService.ShowWarning("Persona can't be empty", " ");
        //    return;
        //}

        try
        {
            HttpResponseMessage response;
            ClientService = new CS_Authentication(ClientExchange, EngineServices.MarketNetwork);
            InvitationService = new CS_Invitation(ClientExchange, EngineServices.MarketNetwork);
            Invitation ReferalInvite = new Invitation();
            ReferalInvite.Core.CreatorId = RefUserId;
            ReferalInvite.FromUserId = RefUserId;
            ReferalInvite.ToEmailId = Model.UserName;

            if (!string.IsNullOrEmpty(RefUserId))
            {
                response = await ClientService.PostAsync(Model, "Register");
                if (response.IsSuccessStatusCode)

                {
                    bool result = await ClientService.ValidateUserAccountAndUpdateSenderReferalCreditsAsync(ReferalInvite);
                    ToastService.ShowSuccess("Welcome To StartupEd Incubation Cloud..", "Registration Successful!");
                    SLog.Write("User Created");
                    CheckLogin(Model.UserName);
                    navigationManager.NavigateTo("/login");
                }
                else
                {
                    ToastService.ShowError(await response.Content.ReadAsStringAsync(), "Registration Failed");
                }
            }
            else
            {
                response = await ClientService.PostAsync(Model, "Register");
                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowSuccess("Welcome To StartupEd Incubation Cloud..", "Registration Successful!");
                    SLog.Write("User Created");
                    //CheckLogin(Model.UserName);
                    navigationManager.NavigateTo("/email-verification");
                }
                else
                {
                    ToastService.ShowError(await response.Content.ReadAsStringAsync(), "Registration Failed");
                }
            }
            IsSpinning = false;
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message, "Registration Failed");
            IsSpinning = false;
        }

    }

    public async void CheckLogin(string Id)
    {
        //Cache_ClientService cacheService = new Cache_ClientService(UXUtility.Engines.MarketNetwork);
        //cacheService.SelfSetValue(Id, "true");
    }

    protected override void OnInitialized()
    {
        EngineServices = MyServiceProvider.GetService<EngineServices>();
        SLog.Write("Signup Loading Complete");
    }

    public List<string> Persona = new List<string>(){
        "Student Entrepreneur",
        "Founder",
        "Investor",
        "Mentor",
        "Intrapreneur",
        "Startup",
        "Incubator",
    };

    public string InputElementStyle { get; set; } = "h-auto border-0 px-0 placeholder-dark-75";
    public string FormElementStyle { get; set; } = "py-2 m-0 border-bottom";

}
