// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace StartupEd.UX.Incubation.Pages.FeedPage
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 13 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.Lib.Engine;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.Extensions.DependencyInjection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.Lib.Engine.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.Lib.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Shared.Layouts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Shared.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Grouping;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Connections;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.BPage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 40 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Others;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.InProgress;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Settings;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Invite;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.FeedPage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 45 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Chatting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Sidebar;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Milestone;

#line default
#line hidden
#nullable disable
#nullable restore
#line 48 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.ProfileTemplates;

#line default
#line hidden
#nullable disable
#nullable restore
#line 51 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One;

#line default
#line hidden
#nullable disable
#nullable restore
#line 52 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 54 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 55 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 56 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Charts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 57 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Maps;

#line default
#line hidden
#nullable disable
#nullable restore
#line 58 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Post;

#line default
#line hidden
#nullable disable
#nullable restore
#line 59 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Views.Card;

#line default
#line hidden
#nullable disable
#nullable restore
#line 60 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Views.Flix;

#line default
#line hidden
#nullable disable
#nullable restore
#line 61 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Views.Grid;

#line default
#line hidden
#nullable disable
#nullable restore
#line 62 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Views.List;

#line default
#line hidden
#nullable disable
#nullable restore
#line 63 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 64 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Composer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 65 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Reactions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 66 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 67 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.PdfViewer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 69 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout;

#line default
#line hidden
#nullable disable
#nullable restore
#line 70 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Base;

#line default
#line hidden
#nullable disable
#nullable restore
#line 71 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Aside;

#line default
#line hidden
#nullable disable
#nullable restore
#line 72 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Footer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 73 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Header;

#line default
#line hidden
#nullable disable
#nullable restore
#line 74 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Header.TopBar;

#line default
#line hidden
#nullable disable
#nullable restore
#line 78 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.SuperAdmin.Components.Feeds;

#line default
#line hidden
#nullable disable
#nullable restore
#line 79 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.SuperAdmin.Components.Cards;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/Pages/FeedPage/XPost.razor"
using StartupEd.Engine.MarketNetwork.Content;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/Pages/FeedPage/XPost.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
[Authorize]

#line default
#line hidden
#nullable disable
    public partial class XPost : BaseComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 333 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/Pages/FeedPage/XPost.razor"
      
    [Parameter] public string UserId { get; set; }
    [Parameter] public Post Model { get; set; }
    [Parameter] public EventCallback<string> ShowReactionModelCallBack { get; set; }
    [Parameter] public EventCallback CommentsCallBack { get; set; }
    [Parameter] public EventCallback PostCallBack { get; set; }
    [Parameter] public CachedUser Cacheduser { get; set; }


    private MyConnectionListModel OpenConnectionList { get; set; }

    private OneUX_SweetAlertBox SweetAlertConfirmation { get; set; }

    private Post_ClientService ClientService { get; set; }
    private Notification_ClientService NotificationClientService { get; set; }
    public Notification NotificationModel = new Notification();
    private UserActivity_ClientService Activity_ClientService { get; set; }
    private User_ClientService User_clientService { get; set; }

    public bool ButtonClick = false;
    private bool IsShow { get; set; } = false;

    private HubConnection hubConnection;
    private HubConnection notificationPostHubConnection;


    protected void ShowSweetAlertModal()
    {
        SweetAlertConfirmation.ShowSweetAlert();
    }

    private async void SubmitComment(string Value)
    {
        if (!string.IsNullOrWhiteSpace(Value))
        {
            SLog.Write("Comment = " + Value + " Sumbitted");
            Model.Comments.Clear();
            Comment c = new Comment();
            c.AuthorId = UXUtility.LoggedInUser.Id;
            c.Value = Value;
            c.CommentedAt = DateTime.UtcNow;           
            Model.Comments.Add(c);
            if (await ClientService.AddComment(Model, Model.Id))
            {
                if (IsConnected) await SendMessage();
                if (UXUtility.LoggedInUser.Id != Model.Core.CreatorId)
                {
                    NotificationModel.SenderId = UXUtility.LoggedInUser.Id;
                    NotificationModel.ReceiverId = Model.Core.CreatorId;
                    NotificationModel.SentAt = DateTime.UtcNow;
                    NotificationModel.NotificationType = "Comments";
                    NotificationModel.Message = UXUtility.LoggedInUser.Name + " Commented on Your Post";
                    NotificationModel.Url = "post/" + Model.Id;
                    await NotificationClientService.PostAsync(NotificationModel);
                    if (IsNotConnected) await SendNotification();
                }

                if(string.IsNullOrEmpty(Model.GroupId) && Model.IsCommunityPost == false)
                {
                    string description = "";
                    if (Model.Core.CreatorId == UXUtility.LoggedInUser.Id)
                    {
                        description = "Commented On Own Post: " + Value;
                    }
                    else
                    {
                        description = "Commented On " + Model.Name + "'s Post: " + Value;
                    }
                    await PostUserActivity(description);
                }
                else
                {
                    await CommunityPostUserActivity(Model.GroupId, "You have Commented In Community Post.");
                }

            }
            await CommentsCallBack.InvokeAsync();
        }
        else
        {
            ToastService.ShowInfo("Comment doesn't allow blank or whitespace");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Activity_ClientService = new UserActivity_ClientService(EngineServices.MarketNetwork);
        ClientService = new Post_ClientService(EngineServices.MarketNetwork);
        User_clientService = new User_ClientService(EngineServices.MarketNetwork);
        NotificationClientService = new Notification_ClientService(EngineServices.MarketNetwork);
        //cachedUser = new CachedUser();
        //cachedUser = await User_clientService.CacheUser(Model.Core.CreatorId);

        int count = Model.Reactions.Count;
        SLog.Write("Post Loaded - " + count);
        hubConnection = new HubConnectionBuilder()
            .WithUrl(EngineServices.MarketNetwork.EndPoint + "/feedhub")
            .Build();
        notificationPostHubConnection = new HubConnectionBuilder().WithUrl(EngineServices.MarketNetwork.EndPoint + "/notificationhub").Build();
        hubConnection.On("ReceiveMessage", () =>
        {
            PostCallBack.InvokeAsync();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await notificationPostHubConnection.StartAsync();

    }
    protected override async Task OnParametersSetAsync()
    {



    }
    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;
    public bool IsNotConnected => notificationPostHubConnection.State == HubConnectionState.Connected;
    Task SendNotification() => notificationPostHubConnection.SendAsync("SendNotification", UXUtility.LoggedInUser.Id, "Post Notification");

    private async Task EditMe(Post Model)
    {
        bool result = false;
        result = await ClientService.EditPost(Model);
        if (result == true)
        {
            ToastService.ShowInfo("Post Updated");
            await PostCallBack.InvokeAsync();
        }
        else
        {
            ToastService.ShowError("Post Not Updated");
        }
    }

    private async Task PinMe()
    {
        StateHasChanged();
        bool result = false;
        result = await ClientService.PiningPost(Model, UXUtility.LoggedInUser.Id);
        if (result == true)
        {
            if (string.IsNullOrEmpty(Model.GroupId) && Model.IsCommunityPost == false)
            {
                string description = "";
                if (Model.Core.CreatorId == UXUtility.LoggedInUser.Id)
                {
                    description = "You have pinned a post. ";
                }
                else
                {
                    description = "You have pinned " + Model.Name + "'s Post.";
                }
                await PostUserActivity(description);
            }
            else
            {
                await CommunityPostUserActivity(Model.GroupId, "You have pinned a post in Community.");
            }

            if (IsConnected) await SendMessage();
            ToastService.ShowInfo("Post Pinned");
            await PostCallBack.InvokeAsync();
        }
        else
        {
            ToastService.ShowError("Post Not Pinned");
        }
    }

    private async Task DeleteMe(bool IsDelete)
    {
        try
        {
            if (IsDelete)
            {
                bool result = false;
                result = await ClientService.RemovePost(Model.Id);
                if (result == true)
                {
                    if (IsConnected) await SendMessage();
                    await PostCallBack.InvokeAsync();
                    ToastService.ShowInfo("Post has been deleted!");
                }
                else
                {
                    throw new Exception("Exception: Post Not Deleted..");
                }
            }
        }
        catch (Exception e)
        {
            SLog.Write(e.Message);
        }
    }

    protected async Task LikeMe(ReactionType reactionType)
    {
        if (reactionType!=null)
        {
            if (Model.Reactions != null && Model.Reactions.Any(item => item.AuthorId == UXUtility.LoggedInUser.Id))
            {
                ButtonClick = true;
            }
            if (!ButtonClick)
            {
                Reaction<Post> r1 = new Reaction<Post>();
                r1 = r1.Create(reactionType,UXUtility.LoggedInUser.Id);
                Model.Reactions.Add(r1);
                if (await ClientService.AddReactions(Model, UXUtility.LoggedInUser.Id))
                {
                    if (IsConnected) await SendMessage();
                    if (UXUtility.LoggedInUser.Id != Model.Core.CreatorId)
                    {
                        NotificationModel.SenderId = UXUtility.LoggedInUser.Id;
                        NotificationModel.ReceiverId = Model.Core.CreatorId;
                        NotificationModel.SentAt = DateTime.UtcNow;
                        NotificationModel.NotificationType = "Reaction";
                        NotificationModel.Message = "Your Post is Liked By " + UXUtility.LoggedInUser.Name;
                        NotificationModel.Url = "post/" + Model.Id;
                        await NotificationClientService.PostAsync(NotificationModel);
                        if (IsNotConnected) await SendNotification();
                    }
                    if (string.IsNullOrEmpty(Model.GroupId) && Model.IsCommunityPost == false)
                    {
                        string description = "";
                        if (Model.Core.CreatorId == UXUtility.LoggedInUser.Id)
                        {
                            description = "You have liked your own post on Feed";
                        }
                        else
                        {
                            description = Model.Name + "'s Post has been liked by you.";
                        }
                        await PostUserActivity(description);
                    }
                    else
                    {
                        await CommunityPostUserActivity(Model.GroupId, "You have liked a post in Community.");
                    }
                }
                await PostCallBack.InvokeAsync();
            }
            else
            {
                //one Copy Cut
                var rct = Model.Reactions.Find(x => x.AuthorId == UXUtility.LoggedInUser.Id);

                if (rct.IsLiked && (rct.Value == reactionType))
                {
                    rct = rct.Remove(rct);
                    Model.Reactions.Where(r => r.Id == rct.Id).Select(r => { r = rct;return r; }).ToList();
                }
                else
                {
                    rct = rct.Update(rct, reactionType);
                    Model.Reactions.Where(r => r.Id == rct.Id).Select(r => { r = rct; return r; }).ToList();
                }
                if (await ClientService.RemoveReactions(Model, UXUtility.LoggedInUser.Id))
                {
                    if (IsConnected) await SendMessage();
                }
                await PostCallBack.InvokeAsync();
            }
        }
        else
        {
            SLog.Write("Reaction is Empty!!!");
        }
    }


    protected async Task PostCommentUpdateAsync(Comment Comment)
    {
        try
        {
            ClientService = new Post_ClientService(EngineServices.MarketNetwork);
            if (Comment != null)
            {
                Post PostModel = new Post();
                PostModel.Id = Model.Id;
                PostModel.Core.Id = Model.Core.Id;
                PostModel.Comments.Add(Comment);
                HttpResponseMessage response = await ClientService.PutAsync(PostModel, "UpdateComment");
                if (response.IsSuccessStatusCode)
                {
                    await PostCallBack.InvokeAsync();
                    ToastService.ShowSuccess("Comment Updated Successfully");
                }
                else
                {
                    throw new Exception("Exception: Not able to update comment.");
                }
            }
        }
        catch (Exception e)
        {
            SLog.Write(e.Message);
        }
    }

    protected async Task PostCommentDeleteAsync(Comment Comment)
    {
        try
        {
            ClientService = new Post_ClientService(EngineServices.MarketNetwork);
            if (Comment != null)
            {
                Post PostModel = new Post();
                PostModel.Id = Model.Id;
                PostModel.Core.Id = Model.Core.Id;
                PostModel.Comments.Add(Comment);
                HttpResponseMessage response = await ClientService.PutAsync(PostModel, "DeleteComment");
                if (response.IsSuccessStatusCode)
                {
                    await PostCallBack.InvokeAsync();
                    ToastService.ShowSuccess("Comment Deleted Successfully");
                }
                else
                {
                    throw new Exception("Exception: Not able to Delete comment.");
                }
            }
        }
        catch (Exception e)
        {
            SLog.Write(e.Message);
        }
    }

    private void ShowComments()
    {
        if (!IsShow)
        {
            IsShow = true;
        }
        else
        {
            IsShow = false;
        }
    }


    private async Task SetPrivacy(string Value)
    {
        if (Value == "OnlyMe")
        {
            Model.IsVisibleMe = true;
            Model.IsPublic = false;
            Model.IsMyConnection = false;
            Model.IsMySpecificConnection = false;
            Model.SpecificConnectionIds = null;
        }
        if (Value == "MyConnections")
        {
            Model.IsVisibleMe = false;
            Model.IsPublic = false;
            Model.IsMyConnection = true;
            Model.IsMySpecificConnection = false;
            Model.SpecificConnectionIds = null;
        }
        if (Value == "Public")
        {
            Model.IsVisibleMe = false;
            Model.IsPublic = true;
            Model.IsMyConnection = false;
            Model.IsMySpecificConnection = false;
            Model.SpecificConnectionIds = null;
        }
        await ClientService.SetPrivacy(Model);
        await PostCallBack.InvokeAsync();
    }

    private async Task UnPinnedMe()
    {
        bool result = false;
        result = await ClientService.UnPiningPost(Model, UXUtility.LoggedInUser.Id);
        if (result == true)
        {
            if (IsConnected) await SendMessage();
            ToastService.ShowInfo("Post UnPinned");
            await PostCallBack.InvokeAsync();
        }
        else
        {
            ToastService.ShowError("Post Not UnPinned");
        }
    }

    protected void CallConnectionListtModal()
    {
        OpenConnectionList.ShowModal();
    }

    protected async Task SetSpecificConnRights()
    {
        await PostCallBack.InvokeAsync();
    }

    protected void CallReactionListModel()
    {
        ShowReactionModelCallBack.InvokeAsync(Model.Id);
    }

    protected async Task PostUserActivity(string description)
    {
        UserActivity userActivity = new UserActivity();
        Activity Module = new Activity();
        Module.CreateActivity("Feed", Model.Id, "Feed Post", description);
        userActivity.Core.CreatorId = UXUtility.LoggedInUser.Id;
        userActivity.Activities.Add(Module);
        await Activity_ClientService.SubmitUserRecentActivityAsync(userActivity);
    }

    protected async Task CommunityPostUserActivity(string communityId, string description)
    {
        UserActivity userActivity = new UserActivity();
        Activity Module = new Activity();
        Module.CreateActivity("Community", communityId, "Community Post", description);
        userActivity.Core.CreatorId = UXUtility.LoggedInUser.Id;
        userActivity.Activities.Add(Module);
        await Activity_ClientService.SubmitUserRecentActivityAsync(userActivity);
    }
    //public async Task LoadCacheForUser()
    //{
    //    foreach (var Item in Model.Comments)
    //    {
    //        if (!cachedUsers.Any(cu => cu.UserId == Item.AuthorId))
    //        {
    //            CachedUser cachedUser = await User_clientService.CacheUser(Item.AuthorId);
    //            cachedUsers.Add(cachedUser);
    //        }
    //    }
    //    State = LoadingContainerState.Loaded;
    //    StateHasChanged();
    //}


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRelativeDateTime RelativeDateTime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IVersionInfoService VersionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService ToastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILoginService loginService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IServiceProvider MyServiceProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591
