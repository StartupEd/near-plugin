// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace StartupEd.UX.Incubation.Pages.FeedPage
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 13 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.Lib.Engine;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.Extensions.DependencyInjection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.Lib.Engine.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.Lib.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Shared.Layouts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Shared.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Grouping;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Connections;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.BPage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 40 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Others;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.InProgress;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Settings;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Invite;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.FeedPage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 45 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Chatting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Sidebar;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Milestone;

#line default
#line hidden
#nullable disable
#nullable restore
#line 48 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.ProfileTemplates;

#line default
#line hidden
#nullable disable
#nullable restore
#line 51 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One;

#line default
#line hidden
#nullable disable
#nullable restore
#line 52 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 54 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 55 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 56 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Charts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 57 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Maps;

#line default
#line hidden
#nullable disable
#nullable restore
#line 58 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Post;

#line default
#line hidden
#nullable disable
#nullable restore
#line 59 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Views.Card;

#line default
#line hidden
#nullable disable
#nullable restore
#line 60 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Views.Flix;

#line default
#line hidden
#nullable disable
#nullable restore
#line 61 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Views.Grid;

#line default
#line hidden
#nullable disable
#nullable restore
#line 62 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Views.List;

#line default
#line hidden
#nullable disable
#nullable restore
#line 63 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 64 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Composer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 65 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Reactions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 66 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 67 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.PdfViewer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 69 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout;

#line default
#line hidden
#nullable disable
#nullable restore
#line 70 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Base;

#line default
#line hidden
#nullable disable
#nullable restore
#line 71 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Aside;

#line default
#line hidden
#nullable disable
#nullable restore
#line 72 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Footer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 73 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Header;

#line default
#line hidden
#nullable disable
#nullable restore
#line 74 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Header.TopBar;

#line default
#line hidden
#nullable disable
#nullable restore
#line 78 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.SuperAdmin.Components.Feeds;

#line default
#line hidden
#nullable disable
#nullable restore
#line 79 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.SuperAdmin.Components.Cards;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/Pages/FeedPage/XSinglePost.razor"
using StartupEd.Engine.MarketNetwork.Content;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/Pages/FeedPage/XSinglePost.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
[Authorize]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/post/{PostId}")]
    public partial class XSinglePost : BaseComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 429 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/Pages/FeedPage/XSinglePost.razor"
          
        //[Parameter]
        //public Post Model { get; set; }
        public Post Model = new Post();
        private Post_ClientService ClientService { get; set; }
        [Parameter] public string PostId { get; set; }
        public string arg;
        private bool calledit { get; set; } = false;
        [Parameter] public string PinnedColor { get; set; }
        public bool ButtonClick = false;
        [Parameter] public EventCallback CommentsCallBack { get; set; }
        [Parameter] public string UserId { get; set; }
        private bool IsShow { get; set; } = false;
        private HubConnection hubConnection;
        [Parameter] public EventCallback PostCallBack { get; set; }
        private MyConnectionListModel OpenConnectionList { get; set; }
        public bool IsSpConValue { get; set; } = false;
        public Notification NotificationModel = new Notification();
        private Notification_ClientService NotificationClientService { get; set; }
        private ReactionListModel OpenReactionList { get; set; }
        private HubConnection notificationHubConnectionOnSinglePost;
        [Parameter] public EventCallback ShowReactionModelCallBack { get; set; }
        private async void SubmitComment(string Value)
        {
            if (!string.IsNullOrEmpty(Value))
            {
                SLog.Write("Comment = " + Value + " Sumbitted");
                Model.Comments.Clear();
                Comment c = new Comment();
                c.AuthorId = UXUtility.LoggedInUser.Id;
                c.Value = Value;
                c.CommentedAt = DateTime.UtcNow;               
                Model.Comments.Add(c);
                if (await ClientService.AddComment(Model, Model.Id))
                {
                    if (IsConnected) await SendMessage();
                    if (UXUtility.LoggedInUser.Id != Model.Core.CreatorId)
                    {
                        NotificationModel.SenderId = UXUtility.LoggedInUser.Id;
                        NotificationModel.ReceiverId = Model.Core.CreatorId;
                        NotificationModel.SentAt = DateTime.UtcNow;
                        NotificationModel.NotificationType = "Comments";
                        NotificationModel.Message = UXUtility.LoggedInUser.Name + " Commented on Your Post";
                        NotificationModel.Url = "post/" + Model.Id;
                        await NotificationClientService.PostAsync(NotificationModel);
                        if (IsNotConnected) await SendNotification();
                    }
                    await LoadPost();
                }
                await CommentsCallBack.InvokeAsync();
            }
            else
            {
                ToastService.ShowInfo("Comments can not be blank");
            }
        }

        protected override async Task OnInitializedAsync()
        {
            ClientService = new Post_ClientService(EngineServices.MarketNetwork);
            NotificationClientService = new Notification_ClientService(EngineServices.MarketNetwork);
            //Model = await ClientService.GetPostByPostId(PostId);

            hubConnection = new HubConnectionBuilder()
            .WithUrl(EngineServices.MarketNetwork.EndPoint + "/feedhub")
            .Build();
            notificationHubConnectionOnSinglePost = new HubConnectionBuilder().WithUrl(EngineServices.MarketNetwork.EndPoint + "/notificationhub").Build();
            hubConnection.On("ReceiveMessage", () =>
            {
                PostCallBack.InvokeAsync();
                CallLoadData();
                StateHasChanged();
            });

            await hubConnection.StartAsync();
            await notificationHubConnectionOnSinglePost.StartAsync();
        }
        protected async override Task OnParametersSetAsync()
        {
            await LoadPost();
        }
        private void CallLoadData()
        {
            Task.Run(async () =>
            {
                await LoadPost();
            });
        }
        protected async Task LoadPost()
        {
            Model = await ClientService.GetPostByPostId(PostId);
            StateHasChanged();
        }
        Task SendMessage() => hubConnection.SendAsync("SendMessage");

        public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;
        public bool IsNotConnected => notificationHubConnectionOnSinglePost.State == HubConnectionState.Connected;
        Task SendNotification() => notificationHubConnectionOnSinglePost.SendAsync("SendNotification", UXUtility.LoggedInUser.Id, "Post Notification");
        private async Task EditMe(Post Model)
        {
            bool result = false;
            result = await ClientService.EditPost(Model);
            if (result == true)
            {
                ToastService.ShowInfo("Post Updated");
                await PostCallBack.InvokeAsync();
            }
            else
            {
                ToastService.ShowError("Post Not Updated");
            }
        }

        private async Task PinMe()
        {
            bool result = false;
            result = await ClientService.PiningPost(Model, UXUtility.LoggedInUser.Id);
            if (result == true)
            {
                if (IsConnected) await SendMessage();
                ToastService.ShowInfo("Post Pinned");
                await PostCallBack.InvokeAsync();
                await LoadPost();
            }
            else
            {
                ToastService.ShowError("Post Not Pinned");
            }
        }

        private async Task DeleteMe()
        {
            bool result = false;
            result = await ClientService.RemovePost(Model.Id);
            if (result == true)
            {
                if (IsConnected) await SendMessage();
                ToastService.ShowInfo("Post Deleted");
                await PostCallBack.InvokeAsync();
                await LoadPost();
            }
            else
            {
                ToastService.ShowError("Post Not Deleted");
            }
        }

        protected async Task LikeMe(ReactionType reactionType)
        {
            if (reactionType != null)
            {
                if (Model.Reactions != null && Model.Reactions.Any(item => item.AuthorId == UXUtility.LoggedInUser.Id))
                {
                    ButtonClick = true;
                }
                if (!ButtonClick)
                {
                    Reaction<Post> r1 = new Reaction<Post>();
                    r1 = r1.Create(reactionType, UXUtility.LoggedInUser.Id);
                    Model.Reactions.Add(r1);
                    if (await ClientService.AddReactions(Model, UXUtility.LoggedInUser.Id))
                    {
                        if (IsConnected) await SendMessage();
                        if (UXUtility.LoggedInUser.Id != Model.Core.CreatorId)
                        {
                            NotificationModel.SenderId = UXUtility.LoggedInUser.Id;
                            NotificationModel.ReceiverId = Model.Core.CreatorId;
                            NotificationModel.SentAt = DateTime.UtcNow;
                            NotificationModel.NotificationType = "Reaction";
                            NotificationModel.Message = "Your Post is Liked By " + UXUtility.LoggedInUser.Name;
                            NotificationModel.Url = "post/" + Model.Id;
                            await NotificationClientService.PostAsync(NotificationModel);
                            if (IsNotConnected) await SendNotification();
                        }
                        await LoadPost();
                    }
                    await PostCallBack.InvokeAsync();
                }
                else
                {
                    //one Copy Cut
                    var rct = Model.Reactions.Find(x => x.AuthorId == UXUtility.LoggedInUser.Id);

                    if (rct.IsLiked && (rct.Value == reactionType))
                    {
                        rct = rct.Remove(rct);
                        Model.Reactions.Where(r => r.Id == rct.Id).Select(r => { r = rct; return r; }).ToList();
                    }
                    else
                    {
                        rct = rct.Update(rct, reactionType);
                        Model.Reactions.Where(r => r.Id == rct.Id).Select(r => { r = rct; return r; }).ToList();
                    }
                    if (await ClientService.RemoveReactions(Model, UXUtility.LoggedInUser.Id))
                    {
                        if (IsConnected) await SendMessage();
                    }
                    await PostCallBack.InvokeAsync();
                    await LoadPost();
                }
            }

        }

        private void ShowComments()
        {
            if (!IsShow)
            {
                IsShow = true;
            }
            else
            {
                IsShow = false;
            }
        }

        private void ShowEdit()
        {
            if (!calledit)
            {
                calledit = true;
            }
            else
            {
                calledit = false;
            }
        }



        private async Task SetPrivacy(string Value)
        {
            if (Value == "OnlyMe")
            {
                Model.IsVisibleMe = true;
                Model.IsPublic = false;
                Model.IsMyConnection = false;
                Model.IsMySpecificConnection = false;
                Model.SpecificConnectionIds = null;
            }
            if (Value == "MyConnections")
            {
                Model.IsVisibleMe = false;
                Model.IsPublic = false;
                Model.IsMyConnection = true;
                Model.IsMySpecificConnection = false;
                Model.SpecificConnectionIds = null;
            }
            if (Value == "Public")
            {
                Model.IsVisibleMe = false;
                Model.IsPublic = true;
                Model.IsMyConnection = false;
                Model.IsMySpecificConnection = false;
                Model.SpecificConnectionIds = null;
            }
            await ClientService.SetPrivacy(Model);
            await PostCallBack.InvokeAsync();
            await LoadPost();
        }
        private async Task UnPinnedMe()
        {
            bool result = false;
            result = await ClientService.UnPiningPost(Model, UXUtility.LoggedInUser.Id);
            if (result == true)
            {
                if (IsConnected) await SendMessage();
                ToastService.ShowInfo("Post UnPinned");
                await PostCallBack.InvokeAsync();
                await LoadPost();
            }
            else
            {
                ToastService.ShowError("Post Not UnPinned");
            }
        }
        protected void CallConnectionListtModal()
        {
            OpenConnectionList.ShowModal();
        }
        protected async Task SetSpecificConnRights()
        {
            await PostCallBack.InvokeAsync();
        }
        protected void CallReactionListModel()
        {
            //OpenReactionList.ShowModal(Model.Id);
            //ShowReactionModelCallBack.InvokeAsync();
        }
        protected async Task PostCommentUpdateAsync(Comment Comment)
        {
            try
            {
                ClientService = new Post_ClientService(EngineServices.MarketNetwork);
                if (Comment != null)
                {
                    Post PostModel = new Post();
                    PostModel.Id = Model.Id;
                    PostModel.Core.Id = Model.Core.Id;
                    PostModel.Comments.Add(Comment);
                    HttpResponseMessage response = await ClientService.PutAsync(PostModel, "UpdateComment");
                    if (response.IsSuccessStatusCode)
                    {
                        await PostCallBack.InvokeAsync();
                        ToastService.ShowSuccess("Comment Updated Successfully");
                        await LoadPost();
                    }
                    else
                    {
                        throw new Exception("Exception: Not able to update comment.");
                    }
                }
            }
            catch (Exception e)
            {
                SLog.Write(e.Message);
            }
        }
    

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRelativeDateTime RelativeDateTime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IVersionInfoService VersionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService ToastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILoginService loginService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IServiceProvider MyServiceProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591
