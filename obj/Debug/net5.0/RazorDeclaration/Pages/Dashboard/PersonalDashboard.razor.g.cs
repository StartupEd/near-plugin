// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace StartupEd.UX.Incubation.Pages.Dashboard
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 13 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.Lib.Engine;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.Extensions.DependencyInjection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.Lib.Engine.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.Lib.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Shared.Layouts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Shared.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Grouping;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Connections;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.BPage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 40 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Others;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.InProgress;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Settings;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Invite;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.FeedPage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 45 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Chatting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Sidebar;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Milestone;

#line default
#line hidden
#nullable disable
#nullable restore
#line 48 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.Pages.ProfileTemplates;

#line default
#line hidden
#nullable disable
#nullable restore
#line 51 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One;

#line default
#line hidden
#nullable disable
#nullable restore
#line 52 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 54 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 55 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 56 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Charts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 57 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Maps;

#line default
#line hidden
#nullable disable
#nullable restore
#line 58 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Post;

#line default
#line hidden
#nullable disable
#nullable restore
#line 59 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Views.Card;

#line default
#line hidden
#nullable disable
#nullable restore
#line 60 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Views.Flix;

#line default
#line hidden
#nullable disable
#nullable restore
#line 61 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Views.Grid;

#line default
#line hidden
#nullable disable
#nullable restore
#line 62 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Views.List;

#line default
#line hidden
#nullable disable
#nullable restore
#line 63 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 64 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Composer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 65 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Reactions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 66 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 67 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Shared.PdfViewer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 69 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout;

#line default
#line hidden
#nullable disable
#nullable restore
#line 70 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Base;

#line default
#line hidden
#nullable disable
#nullable restore
#line 71 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Aside;

#line default
#line hidden
#nullable disable
#nullable restore
#line 72 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Footer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 73 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Header;

#line default
#line hidden
#nullable disable
#nullable restore
#line 74 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.One.Components.Layout.Header.TopBar;

#line default
#line hidden
#nullable disable
#nullable restore
#line 78 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.SuperAdmin.Components.Feeds;

#line default
#line hidden
#nullable disable
#nullable restore
#line 79 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
using StartupEd.UX.Incubation.SuperAdmin.Components.Cards;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/Pages/Dashboard/_Imports.razor"
using StartupEd.Engine.MarketNetwork;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/Pages/Dashboard/_Imports.razor"
using StartupEd.UX.Incubation.Pages.Dashboard;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/Pages/Dashboard/_Imports.razor"
using StartupEd.UX.One.Components.Custom.Cards;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/Pages/Dashboard/PersonalDashboard.razor"
using StartupEd.Lib.Core.Modules;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/Pages/Dashboard/PersonalDashboard.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/_Imports.razor"
[Authorize]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/mydashboard")]
    public partial class PersonalDashboard : BaseComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 390 "/Users/ankitbuti/workspace/bigapple_corev3/UXs/Incubation/Pages/Dashboard/PersonalDashboard.razor"
       
    private OneUX_SweetAlertBox ConfirmToDoDone { get; set; }
    private User UserModel = new User();
    private Profile ProfileModel = new Profile();
    private List<UserFullInfo> ProfileVisitors { get; set; } = new List<UserFullInfo>();
    private List<string> Last7Days { get; set; }
    private List<int> ChartData { get; set; }
    private List<string> VisitorsId { get; set; } = new List<string>();

    private Profile_ClientService ProfileService { get; set; }
    private User_ClientService UserService { get; set; }
    private UserActivity_ClientService ActivityService { get; set; }

    private UserActivity UserActivities { get; set; } = new UserActivity();
    private List<User> UserConnections { get; set; } = new List<User>();
    private List<ConnectionLocation> ConnectionLocations { get; set; } = new List<ConnectionLocation>();
    private ConnectionLocation CLocation = new ConnectionLocation();

    private List<ConnectionRequest> ConnectionRequests = new List<ConnectionRequest>();
    private ConnectionRequest_ClientService Request_ClientService { get; set; }
    private int SentConnectionRequests { get; set; }
    private int ReceivedConnectionRequests { get; set; }

    private List<Events> UserEvents { get; set; } = new List<Events>();
    private List<Events> AppliedEvents { get; set; } = new List<Events>();
    private Events_ClientService EventService { get; set; }
    private List<Registration> EventRegistrations { get; set; } = new List<Registration>();
    private List<string> RegistrationPeriod { get; set; } = new List<string>();
    private List<int> RegistrationData { get; set; } = new List<int>();
    protected string SelectedEventId { get; set; }


    private List<MyTask> ToDoTasks { get; set; } = new List<MyTask>();
    private MyTask TaskModel = new MyTask();
    private MyTask_ClientService Task_ClientService { get; set; }
    private List<string> DefalutStatus = new List<string>() { "To do", "Progress", "Done" };
    private string PriorityCode { get; set; } = Priority.High.ToString();
    public enum Priority { High = 1, Medium = 2, Low = 3 }
    public string DisappearWithin { get; set; }

    //private Dictionary<KeyValuePair<string, double>, KeyValuePair<string,string>> MapCorordinates { get; set; }
    IJSObjectReference _module;
    IJSObjectReference module;
    private HubConnection CallbackhubConnection;
    protected enum LoadingContainerState { Loading, Loaded, Error }
    protected LoadingContainerState State;
    protected LoadingContainerState ActivityState;
    protected LoadingContainerState TodoState;
    protected LoadingContainerState ConnState;
    protected LoadingContainerState EventState;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await SyncLoggedInUserStatus();
            string LoggedInUserId = UXUtility.LoggedInUser.Id;
            UserService = new User_ClientService(EngineServices.MarketNetwork);
            ProfileService = new Profile_ClientService(EngineServices.MarketNetwork);
            Request_ClientService = new ConnectionRequest_ClientService(EngineServices.MarketNetwork);
            ActivityService = new UserActivity_ClientService(EngineServices.MarketNetwork);
            Task_ClientService = new MyTask_ClientService(EngineServices.MarketNetwork);
            EventService = new Events_ClientService(EngineServices.MarketNetwork);

            CallbackhubConnection = new HubConnectionBuilder().WithUrl(EngineServices.MarketNetwork.EndPoint + "/callback").Build();
            CallbackhubConnection.On("RerenderData", () =>
            {
                CallLoadMyTaskToDos();
                StateHasChanged();
            });

            await LoadUserConnections(LoggedInUserId);
            await LoadRecentActivity(LoggedInUserId);
            await LoadMyTaskToDos(LoggedInUserId);
            await LoadUserEvents(LoggedInUserId);

            await CallbackhubConnection.StartAsync();
            if (CallbackhubConnection.State == HubConnectionState.Connected)
                Console.WriteLine("callback connection started");
        }
        catch (Exception ex)
        {
            SLog.Write(ex.Message);
        }
    }

    public bool IsConnected => CallbackhubConnection.State == HubConnectionState.Connected;
    Task LoadDataCallback() => CallbackhubConnection.SendAsync("DataCallback");

    private void CallLoadMyTaskToDos()
    {
        Task.Run(async () =>
        {
            ToDoTasks = await Task_ClientService.GetAssignedTaskForTodoAsync(UXUtility.LoggedInUser.Id);
            StateHasChanged();
        });
    }

    protected async override Task OnParametersSetAsync()
    {
        try
        {
            State = LoadingContainerState.Loading;
            string LoggedInUserId = UXUtility.LoggedInUser.Id;
            UserModel = await UserService.GetUserInfoById(LoggedInUserId);
            ProfileModel = await ProfileService.GetProfileByUserId(LoggedInUserId);

            Last7Days = new List<string>();
            ChartData = new List<int>();
            for (int i = 0; i < 7; i++)
            {
                string Date = DateTime.UtcNow.ToLocalTime().AddDays(-i).ToString("dd MMM");
                Last7Days.Add(Date);

                if (ProfileModel.ProfileViews.ContainsKey(DateTime.UtcNow.ToLocalTime().AddDays(-i).ToString("dd MMM yy")))
                {
                    var Data = ProfileModel.ProfileViews.FirstOrDefault(x => x.Key == DateTime.UtcNow.ToLocalTime().AddDays(-i).ToString("dd MMM yy")).Value;
                    if (Data.Count == 0)
                    {
                        ChartData.Add(0);
                    }
                    if (Data.Count > 0)
                    {
                        ChartData.Add(Data.Count);
                        if (Data.Count > 1)
                        {
                            VisitorsId.AddRange(Data);
                        }
                        else
                        {
                            VisitorsId.Add(Data[0]);
                        }
                    }
                }
                else
                {
                    ChartData.Add(0);
                }
            }
            Last7Days.Reverse();
            ChartData.Reverse();
            Console.WriteLine(VisitorsId.Count);
            VisitorsId = VisitorsId.Distinct().ToList();
            if (VisitorsId.Count != 0)
            {
                ProfileVisitors = await UserService.GetUserAndProfileForListOfUserIds(VisitorsId);
            }
            State = LoadingContainerState.Loaded;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            SLog.Write(ex.Message);
            State = LoadingContainerState.Error;
        }
    }

    protected async Task LoadUserConnections(string loggedInUserId)
    {
        try
        {
            ConnState = LoadingContainerState.Loading;
            UserConnections = await UserService.GetUserConnectionsListAsync(loggedInUserId);
            foreach (var connections in UserConnections)
            {
                CLocation = new ConnectionLocation();
                CLocation.name = connections.Name;
                CLocation.coordinate.Latitude = connections.Address.Lattitude;
                CLocation.coordinate.Longitude = connections.Address.Longitude;
                if (connections.Address.Lattitude != 0 && connections.Address.Longitude != 0)
                {
                    ConnectionLocations.Add(CLocation);
                }
            }
            Console.WriteLine(ConnectionLocations.Count);

            ConnectionRequests = await Request_ClientService.GetAllConnectionRequestsForUser(loggedInUserId);
            if (ConnectionRequests.Count != 0)
            {
                SentConnectionRequests = ConnectionRequests.FindAll(x => x.FromUserId == UXUtility.LoggedInUser.Id && x.Status == ConnectionStatus.Created).Count;
                ReceivedConnectionRequests = ConnectionRequests.FindAll(x => x.ToUserId == UXUtility.LoggedInUser.Id && x.Status == ConnectionStatus.Created).Count;
            }
            ConnState = LoadingContainerState.Loaded;
            StateHasChanged();
        }
        catch (Exception e)
        {
            SLog.Write(e.Message);
            ConnState = LoadingContainerState.Error;
        }
    }

    protected async Task LoadRecentActivity(string loggedInUserId)
    {
        try
        {
            ActivityState = LoadingContainerState.Loading;
            UserActivities = await ActivityService.GetUserRecentActivityById(loggedInUserId);
            ActivityState = LoadingContainerState.Loaded;
            StateHasChanged();
        }
        catch (Exception e)
        {
            SLog.Write(e.Message);
            ActivityState = LoadingContainerState.Error;
        }
    }

    protected async Task LoadMyTaskToDos(string loggedInUserId)
    {
        try
        {
            TodoState = LoadingContainerState.Loading;
            ToDoTasks = await Task_ClientService.GetAssignedTaskForTodoAsync(loggedInUserId);
            TodoState = LoadingContainerState.Loaded;
            StateHasChanged();
        }
        catch (Exception e)
        {
            SLog.Write(e.Message);
            TodoState = LoadingContainerState.Error;
        }
    }

    private async void DiscardToDo()
    {
        TaskModel.Clear();
        await _module.InvokeAsync<object>("AccordianCollapse", "collapseTodoForm");
    }

    private async Task SubmitPersonalToDoAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(TaskModel.TaskTitle))
            {
                ToastService.ShowWarning("Please Fill To Do Title", "Required");
                return;
            }
            TaskModel.Core.CreatorId = UXUtility.LoggedInUser.Id;
            TaskModel.Name = UXUtility.LoggedInUser.Name;
            TaskModel.TaskAssignUserId = UXUtility.LoggedInUser.Id;
            TaskModel.TaskAssignUserName = UXUtility.LoggedInUser.Name;
            TaskModel.Status = DefalutStatus[0];
            TaskModel.TaskPriority = PriorityCode;
            TaskModel.TaskCompleteOn = await JSRuntime.InvokeAsync<DateTime>("DatePickerValue", "taskCompleteOnDate");
            if (string.IsNullOrEmpty(TaskModel.Core.Id))
            {
                HttpResponseMessage response = await Task_ClientService.PostAsync(TaskModel);
                if (response.IsSuccessStatusCode)
                {
                    if (IsConnected) await LoadDataCallback();
                    await _module.InvokeAsync<object>("AccordianCollapse", "collapseTodoForm");
                    ToastService.ShowSuccess("Personal To Do has been created");
                    TaskModel.Clear();
                }
                else
                {
                    SLog.Write("To Do Creation Failed!");
                    ToastService.ShowError(response.ReasonPhrase, "Error");
                }
            }
            else
            {
                HttpResponseMessage response = await Task_ClientService.PutAsync(TaskModel);
                if (response.IsSuccessStatusCode)
                {
                    if (IsConnected) await LoadDataCallback();
                    await _module.InvokeAsync<object>("AccordianCollapse", "collapseTodoForm");
                    ToastService.ShowSuccess("To Do has been updated!");
                    TaskModel.Clear();
                }
                else
                {
                    SLog.Write("To Do Updation Failed!");
                    ToastService.ShowError(response.ReasonPhrase, "Error");
                }
            }
        }
        catch (Exception ex)
        {
            SLog.Write(ex);
            ToastService.ShowError(ex.Message, "Exception");
        }
    }

    protected async Task EditToDoAsync(string todoId)
    {
        if (!string.IsNullOrEmpty(todoId))
        {
            TaskModel = ToDoTasks.Find(td => td.Core.Id == todoId);
            await _module.InvokeAsync<object>("ShowCollapse", "collapseTodoForm");
        }
    }

    private async Task UpdateToDoStatusOnCheckChanged(string TodoId)
    {
        try
        {
            HttpResponseMessage response;
            TaskModel = ToDoTasks.Where(task => task.Core.Id == TodoId).FirstOrDefault();
            //TaskModel = ToDoTasks.SingleOrDefault(task => task.Core.Id == TodoId && task.Status == DefalutStatus[0] || task.Status == DefalutStatus[2]);
            if (TaskModel.Status == DefalutStatus[0])
            {
                TaskModel.TaskDoneAt = DateTime.UtcNow;
                TaskModel.Status = DefalutStatus[2];
                response = await Task_ClientService.PutAsync(TaskModel);
                if (response.IsSuccessStatusCode)
                {
                    if (IsConnected) await LoadDataCallback();
                    ToastService.ShowSuccess("To do has been complete.", "Done");
                }
                else
                {
                    SLog.Write("To Do Can't Update As Done.");
                    ToastService.ShowError(response.ReasonPhrase, "Error");
                }
            }
            else if (TaskModel.Status == DefalutStatus[2])
            {
                TaskModel.Status = DefalutStatus[0];
                response = await Task_ClientService.PutAsync(TaskModel);
                if (response.IsSuccessStatusCode)
                {
                    if (IsConnected) await LoadDataCallback();
                    ToastService.ShowSuccess("To Do status reverse from Done to To do");
                }
                else
                {
                    SLog.Write("Not Able To Reverse Status Done to To do!");
                    ToastService.ShowError(response.ReasonPhrase, "Error");
                }
            }
            else
            {
                ToastService.ShowError("Something Went Wrong!", "Error");
            }
        }
        catch (Exception ex)
        {
            SLog.Write(ex);
            ToastService.ShowError(ex.Message, "Exception");
        }
    }


    protected async void DeleteToDoAsync(string todoId)
    {
        if (!string.IsNullOrEmpty(todoId))
        {
            string TodoName = ToDoTasks.Find(td => td.Core.Id == todoId).Name;
            try
            {
                HttpResponseMessage message = await Task_ClientService.DeleteAsync(todoId);
                if (message.IsSuccessStatusCode)
                {
                    ToastService.ShowSuccess("To Do Has Been Deleted Successfully!");
                    if (IsConnected) await LoadDataCallback();
                }
            }
            catch (Exception ex)
            {
                ToastService.ShowError(ex.Message, "Exception");
            }
        }
    }

    protected async Task LoadUserEvents(string loggedInUserId)
    {
        try
        {
            UserEvents AllEvents = new UserEvents();
            EventState = LoadingContainerState.Loading;
            AllEvents = await EventService.GetCreatedAndAppliedEventsForUser(loggedInUserId);
            UserEvents = AllEvents.MyEvents.FindAll(data => data.Core.CreatorId == loggedInUserId).ToList();
            EventRegistrations = AllEvents.RegisteredUsers;
            foreach (var eventinfo in AllEvents.AppliedEventIds)
            {
                Events appliedEvent = AllEvents.MyEvents.Find(data => data.Core.Id == eventinfo);
                AppliedEvents.Add(appliedEvent);
            }
            if (UserEvents != null && UserEvents.Count != 0)
            {
                DisplayEventsChartAsync(UserEvents[0].Core.Id);
            }
            EventState = LoadingContainerState.Loaded;
            StateHasChanged();
        }
        catch (Exception e)
        {
            SLog.Write(e.Message);
            EventState = LoadingContainerState.Error;
        }
    }

    protected void DisplayEventsChartAsync(string eventId)
    {
        if (UserEvents != null && UserEvents.Count != 0)
        {
            RegistrationPeriod.Clear();
            RegistrationData.Clear();
            Events SelectedEvent = UserEvents.Find(e => e.Core.Id == eventId);

            DateTime startDate = SelectedEvent.Deadlines.RegistrationStart.ToLocalTime();
            DateTime endDate = SelectedEvent.Deadlines.RegistrationEnd.ToLocalTime();

            for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
            {
                RegistrationPeriod.Add(date.ToString("dd MMM"));
                if (EventRegistrations != null && EventRegistrations.Count != 0)
                {
                    RegistrationData.Add(EventRegistrations.FindAll(x => x.EventsId == eventId && x.ApplyDate.ToShortDateString() == date.ToShortDateString()).Count);
                }
            }
        }
    }

    async Task EventDataChangeAsync(ChangeEventArgs e)
    {
        try
        {
            DisplayEventsChartAsync(e.Value.ToString());
            IJSObjectReference module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/OneUX/assets/js/linechart.js");
            await module.InvokeVoidAsync("LineCharts", "registrationChart", RegistrationPeriod, RegistrationData, "", "300", "ReRenderChart");
        }
        catch (Exception ex)
        {
            SLog.Write(ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                IJSObjectReference module2 = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "https://s1.startuped.net/incubation_cloud/assets/plugins/custom/leaflet/leaflet.bundle.js");
                IJSObjectReference _bundle = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "https://s1.startuped.net/incubation_cloud/assets/plugins/custom/draggable/draggable.bundle.js");
                _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./assets/js/dashboard/dragablewidget.js");
                await _module.InvokeVoidAsync("DragableWidget");
                module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/OneUX/assets/js/script.js");
                await module.InvokeVoidAsync("BootstrapSelectpicker");
            }
        }
        catch (Exception e)
        {
            SLog.Write(e.Message);
        }
    }
        

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IVersionInfoService VersionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService ToastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILoginService loginService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IServiceProvider MyServiceProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591
