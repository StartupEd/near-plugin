@inherits LayoutComponentBase
@inject IJSRuntime _JSRuntime
@using Microsoft.AspNetCore.SignalR.Client
@using StartupEd.Engine.MarketNetwork

<!-- begin:: Header Mobile -->
<OneUX_HeaderMobile />
<!-- end:: Header Mobile -->

<div class="d-flex flex-column flex-root">
    <!-- begin:: Page -->
    <div class="d-flex flex-row flex-column-fluid page">
        <!-- begin:: Aside -->
        <div class="aside aside-left  aside-fixed  d-flex flex-column flex-row-auto" id="kt_aside">
            <!--begin::Brand-->
            <OneUX_AsideBrand />
            <!--end::Brand-->
            <!-- begin:: Aside Menu -->
            <OneUX_AsideMenu />
            <!-- end:: Aside Menu -->
        </div>
        <!-- end:: Aside -->
        <!--begin::Wrapper-->
        <div class="d-flex flex-column flex-row-fluid wrapper" id="kt_wrapper">

            <!-- begin:: Header -->
            <div id="kt_header" class="header header-fixed">
                <!--begin::Container-->
                <div class="container-fluid  d-flex align-items-stretch justify-content-between">
                    <div class="header-menu-wrapper header-menu-wrapper-left" id="kt_header_menu_wrapper">
                        <OneUX_HeaderMenu />
                    </div>
                    <OneUX_PlanNotification Model="AuthModel"/>
                    <div class="topbar">
                        <div class="dropdown" id="kt_quick_search_toggle">
                            <SearchBar />
                        </div>
                        <OneUX_HeaderTopbar />
                    </div>

                </div>
            </div>
            <!--begin::Sticky Toolbar-->
            <OneUX_StickyToolbar />
            <!--end::Sticky Toolbar-->
            <div class="content  d-flex flex-column flex-column-fluid" id="kt_content">
                @Body
            </div>
            <!--end::Content-->
            <!-- begin:: Footer -->
            <OneUX_Footer />
            <!-- end:: Footer -->
        </div>
        <!-- end:: Wrapper -->
    </div>
    <!-- end:: Page -->
</div>

<!-- end:: Root -->
<OneUX_ToastBase />
<OneUX_UserPanel />
<!-- <OneUX_ChatPanel /> -->
<ContactModal />
<AboutModal />
<DirectInviteModal />
<OneUX_NotificationSidebar />
<!--end::Modal-->
<!-- begin::Scrolltop -->
<OneUX_ScrollTop />




@code{
    private HubConnection ChatRecievehubConnection;
    private CS_User UserService { get; set; }
    public User UserInfo = new User();
    string UserName = "";
    public Authentication AuthModel { get; set; } = new Authentication();
    public Authentication AuthService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        SLog.Write("Main Layout OnInitialized");
        UXUtility.Engines = MyServiceProvider.GetService<EngineServices>();
        await IsAuthenticated();
        UserService = new CS_User(ClientExhange, UXUtility.Engines.MarketNetwork);
        AuthService = new CS_Authentication(ClientExhange, UXUtility.Engines.MarketNetwork);
        AuthModel = await AuthService.GetAuthModelByUserId(UXUtility.LoggedInUser.Id);
        ChatRecievehubConnection = new HubConnectionBuilder().WithUrl(UXUtility.Engines.MarketNetwork.SystemEndpoint.Host + "/chathub").Build();

        ChatRecievehubConnection.On<string, string>("ReceiveMessage", (user, ReceiverId) =>
        {
            if (UXUtility.LoggedInUser.Id != user && UXUtility.LoggedInUser.Id == ReceiverId)
            {
                CallLoadUserInfo(user);
            }

            StateHasChanged();
        });
        await ChatRecievehubConnection.StartAsync();
    }

    private void CallLoadUserInfo(string user)
    {
        Task.Run(async () =>
        {
            await LoadUserInfo(user);
        });
    }

    protected async Task LoadUserInfo(string user)
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri).ToString();
        if (!uri.Contains("/inbox/message/"))
        {
            UserInfo = await UserService.GetUserInfoById(user);
            UserName = UserInfo.Name;
            ToastService.ShowInfo("You have new message from " + UserName + " .");
        }

    }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    public async Task<bool> IsAuthenticated()
    {
        try
        {
            var authState = await AuthenticationState;
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                SLog.Write("User Is Authenticated...." + user.Identity.Name);
                return true;
            }
            else
            {
                SLog.Write("User Not Authenticated");
                return false;
            }
        }
        catch (Exception ex)
        {
            SLog.Write(ex);
            return false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await _JSRuntime.InvokeVoidAsync("BundledJS");
            }
        }
        catch (Exception ex)
        {
            SLog.Write(ex);
        }

    }

    public void Dispose()
    {
        _ = ChatRecievehubConnection.DisposeAsync();
    }

}